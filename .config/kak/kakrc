colorscheme gruvbox-dark
set global scrolloff 2,4
set global indentwidth 2
set global tabstop 4

map global normal = '|fmt -w $kak_opt_autowrap_column<ret>'

# Clipboard interaction (via xclip)
map global normal <c-y> '<a-|>xclip -selection clipboard<ret>'
map global normal <c-v> '!xclip -out -selection clipboard<ret>'

# Line numbers
add-highlighter -override global/ number-lines -relative -hlcursor

# Matching characters
add-highlighter -override global/ show-matching

# Color column
add-highlighter -override global/ column 150 MenuBackground

# Experiments with selections
face global PrimarySelection +u
face global SecondarySelection +c

# <c-j> and <c-k> for selecting completion candidate
#hook global InsertCompletionShow .* %{
#  map window insert <ret> <c-n>
#  map window insert <c-k> <c-p>
#}
#hook global InsertCompletionHide .* %{
#  unmap window insert <ret> <c-n>
#  unmap window insert <c-k> <c-p>
#}

# expand tab with proper number of spaces, no softtabstop
hook global InsertChar \t %{
  try %{
    execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
  }
}
hook global InsertDelete ' ' %{
  try %{
    execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
  }
}

# use ripgrep for grepping
set global grepcmd 'rg -nH'

# python settings
# define-command -override jedi-goto-definition \
#   -docstring "Open file with definition of symbol under cursor" %{
#   evaluate-commands %sh{
#     dir=$(mktemp -d "${TMPDIR:-/tmp}"/kak-jedi.XXXXXXXX)
#     mkfifo ${dir}/fifo
#     printf %s\\n "set-option buffer jedi_tmp_dir ${dir}"
#     printf %s\\n "evaluate-commands -no-hooks write -sync ${dir}/buf"
#   }
#   evaluate-commands %sh{
#     dir=${kak_opt_jedi_tmp_dir}
#     printf %s\\n "evaluate-commands -draft %{ edit! -fifo ${dir}/fifo *jedi-output* }"
#     ((
#       cd $(dirname ${kak_buffile})

#       export PYTHONPATH="$kak_opt_jedi_python_path:$PYTHONPATH"
#       python 2> "${dir}/fifo" -c 'if 1:
#           import os
#           dir = os.environ["kak_opt_jedi_tmp_dir"]
#           buffile = os.environ["kak_buffile"]
#           line = int(os.environ["kak_cursor_line"])
#           column = int(os.environ["kak_cursor_column"])
#           client = os.environ["kak_client"]
#           def quote(s):
#               c = chr(39) # single quote
#               return c + s.replace(c, c+c) + c
#           import jedi
#           script = jedi.Script(code=open(dir + "/buf", "r").read(), path=buffile)
#           if definitions := script.infer(line=line, column=column):
#               definition = definitions[0]
#               file = str(definition.module_path)
#               pos = definition.get_definition_start_position()
#               l = pos[0]
#               c = pos[1]
#               cmd = f"edit {quote(file)} {l} {c}"
#           else:
#               cmd = "echo definition not found"
#           print("evaluate-commands -client", quote(client), quote(cmd))
#       ' | kak -p "${kak_session}"
#       rm -r ${dir}
#     ) & ) > /dev/null 2>&1 < /dev/null
#   }
# }
remove-hooks global python
hook -group python global WinSetOption filetype=python %{
  set-option window indentwidth 4
  set-option window lintcmd %{ run() { pylint --msg-template='{path}:{line}:{column}: {category}: {msg_id}: {msg} ({symbol})' "$1" | awk -F: 'BEGIN { OFS=":" } { if (NF == 6) { $3 += 1; print } }'; } && run }
  set-option window formatcmd %{ autopep8 --max-line-length 150 --experimental - }
  hook -group python window BufWritePre '.*\.py' %{ format }
  # hook -group python window BufWritePost '.*\.py' %{ format ; eval -no-hooks write }
  # jedi-enable-autocomplete
  # map window normal <c-g> ':jedi-goto-definition<ret>'
}

# rust settings
remove-hooks global rust
hook -group rust global WinSetOption filetype=rust %{
  set-option window indentwidth 4
  set-option window formatcmd %{ rustfmt }
  set-option window extra_word_chars ! _
}

# julia settings
remove-hooks global julia
define-command -override -hidden julia-indent-on-new-line %{
  evaluate-commands -draft -itersel %{
    # preserve previous line indent
    try %{ execute-keys -draft <semicolon> K <a-&> }
    # cleanup trailing whitespaces from previous line
    try %{ execute-keys -draft k x s \h+$ <ret> d }
    # indent after start structure
    try %{ execute-keys -draft k x <a-k> ^ \h * (begin|do|if|else|elseif|for) <ret> j <a-gt> }
  }
}
hook -group julia global WinSetOption filetype=julia %{
  set-option window indentwidth 4
  hook window InsertChar \n -group julia-indent julia-indent-on-new-line
  hook window InsertChar \s -group julia-indent %{
    # dedent after end structure
    try %{ execute-keys -draft x <a-k> ^ \h * (end) <ret> <a-lt> }
  }
  hook window InsertChar \n -group julia-indent %{
    # dedent after end structure
    try %{
      execute-keys -draft k x <a-k> ^ \h * (end) <ret> <a-lt>
      execute-keys -draft <semicolon> K <a-&>
    }
  }
}

# browse with broot + kak editor combination
define-command -override -params 0 -docstring %{
  browse: split window and browse current directory with broot
  No checking if used commands and tools exist is currently performed
} browse %{ evaluate-commands %{
  terminal %sh{ echo "kak_session=$kak_session broot" }
}}
alias global br browse

# REPL settings - works best in tmux
map global normal <a-ret> ":repl-send-text<ret>"

# plugins
# manager
evaluate-commands %sh{
  plugins="$kak_config/plugins"
  mkdir -p "$plugins"
  [ ! -e "$plugins/plug.kak" ] && \
    git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
  printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

# kak-lsp
plug "kak-lsp/kak-lsp" do %{
  sed -i -E 's/(title=\$1; shift)$/\1; title=$(echo "$title" | tr -d '"'"'\\n'"'"')/' rc/lsp.kak
  cargo install --locked --force --path .
  mkdir -p ~/.config/kak-lsp
  cp -n kak-lsp.toml ~/.config/kak-lsp/
} config %{
  set-option global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
  set-option global lsp_code_lens_sign ''
  define-command -override -hidden lsp-show-error -params 1 -docstring "Render error" %{
    echo -debug "kak-lsp:" %arg{1}
  }
  map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"
  define-command -override lsp-restart -params 0 -docstring "Restart lsp server" %{
    lsp-stop
    lsp-start
  }

  evaluate-commands %sh{
    printf "set-option global lsp_inlay_diagnostic_gap '%$(expr ${kak_opt_tabstop} \* 3)s'\n" ' '
  }
  # for python language server configuration
  set-option global lsp_config %{
    [language.python.settings._]
  }

  hook global WinSetOption filetype=(rust|python|clojure|julia|nim) %{
    echo -debug "Enabling LSP for filetype %opt{filetype}"
    lsp-enable-window
    lsp-inlay-diagnostics-enable window
  }

  hook global WinSetOption filetype=(clojure) %{
    hook window BufWritePre .* %{
      lsp-formatting-sync
    }
  }

  hook global WinSetOption filetype=(rust|julia) %{
    hook window BufWritePre .* %{
      lsp-formatting-sync
    }
    # hook window NormalIdle .* %{
    #   lsp-formatting-sync
    # }
    hook window ModeChange pop:insert:normal %{
      lsp-formatting-sync
    }
  }

  hook global KakEnd .* lsp-exit
}

# auto-pairs
# TODO: patch
plug "alexherbo2/auto-pairs.kak" do %{
  sed -i -E 's/%%<([^>]*)>/%%üêà\1üêà/g' rc/auto-pairs.kak
} config %{
  hook global WinSetOption filetype=rust %{
    set-option window auto_pairs ( ) { } [ ] < > '"' '"' '|' '|'
    enable-auto-pairs
  }
  hook global WinSetOption filetype=python %{
    set-option window auto_pairs ( ) [ ] { } '"' '"' "'" "'"
    enable-auto-pairs
  }
  hook global WinSetOption filetype=(clojure) %{
    set-option window auto_pairs ( ) [ ] { } '"' '"'
    enable-auto-pairs
  }
  hook global WinSetOption filetype=(nim) %{
    enable-auto-pairs
  }
}

plug "eraserhd/parinfer-rust" do %{
  cargo install --force --path .
} config %{
  hook global WinSetOption filetype=(clojure) %{
    parinfer-enable-window -paren
  }
}

plug "h-youhei/kakoune-surround" config %{
  declare-user-mode surround
  map global surround s ':surround<ret>' -docstring 'insert surrounding characters'
  map global surround c ':change-surround<ret>' -docstring 'change surrounding characters'
  map global surround d ':delete-surround<ret>' -docstring 'delete surrounding characters'
  map global user s %{:enter-user-mode surround<ret>} -docstring "Surround mode"
}

plug "crizan/kak-rainbower" do %{
  cd rc
  sed -i -E 's/(const char \*color = "rgb):003300(.*)/\1:141414\2/' rainbower.cpp
  g++ rainbower.cpp -O2 -o rainbower
  git restore .
} config %{
  hook global WinSetOption filetype=(clojure) %{
    rainbow-enable-window
  }
}
