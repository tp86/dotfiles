syntax on
filetype plugin indent on

set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set shiftround
set autoindent
set smartindent

set number relativenumber

let s:vim_home = fnamemodify($MYVIMRC, ':p:h')

let s:plug_file = expand(s:vim_home..'/autoload/plug.vim')
if empty(glob(s:plug_file))
  let s:curl = 'curl'
  if has('win32')
    let s:curl ..= '.exe'
  endif
  silent execute '!' .. s:curl .. ' -fLo ' .. s:plug_file .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'tpope/vim-surround'
Plug 'tmsvg/pear-tree'
let g:pear_tree_ft_disabled = ['vim']
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1
Plug 'justinmk/vim-sneak'
let g:sneak#label = v:true
Plug 'tpope/vim-commentary'
Plug 'junegunn/rainbow_parentheses.vim'
let g:rainbow#max_level = 24
augroup rainbow_activation
  autocmd!
  autocmd FileType clojure RainbowParentheses
augroup end

Plug 'morhetz/gruvbox'
let g:gruvbox_italic=1

call plug#end()

set hidden

set termguicolors
set background=dark
colorscheme gruvbox

set nowrap
let &listchars = join(["tab:\u00bb ", "trail:\u00b7", "precedes:\u27ea", "extends:\u27eb"], ',')
set list
set scrolloff=3
set sidescrolloff=6
augroup color_column
  autocmd!
  autocmd BufNewFile,BufRead,BufWinEnter,WinEnter *
        \ let &l:colorcolumn = join(insert(range(120, 999), 80), ',')
  autocmd WinLeave * let &l:colorcolumn = join(range(1, 999), ',')
augroup end
augroup cursor_line
  autocmd!
  autocmd BufNewFile,BufRead,BufWinEnter,WinEnter * let &l:cursorline = !&diff
  autocmd OptionSet diff let &l:cursorline = !v:option_new
  autocmd WinLeave * setlocal nocursorline
augroup end
"" open quickfix window always at the bottom of all windows
augroup quickfix_window
  autocmd!
  autocmd FileType qf wincmd J
augroup end

tnoremap <esc> <c-\><c-n>

nnoremap <a-h> <c-w>h
nnoremap <a-j> <c-w>j
nnoremap <a-k> <c-w>k
nnoremap <a-l> <c-w>l
inoremap <a-h> <c-\><c-n><c-w>h
inoremap <a-j> <c-\><c-n><c-w>j
inoremap <a-k> <c-\><c-n><c-w>k
inoremap <a-l> <c-\><c-n><c-w>l
vnoremap <a-h> <c-w>h
vnoremap <a-j> <c-w>j
vnoremap <a-k> <c-w>k
vnoremap <a-l> <c-w>l
tnoremap <a-h> <c-\><c-n><c-w>h
tnoremap <a-j> <c-\><c-n><c-w>j
tnoremap <a-k> <c-\><c-n><c-w>k
tnoremap <a-l> <c-\><c-n><c-w>l

noremap H ^
noremap L $
nnoremap <backspace> <c-^>

function! s:insert_put()
  let keys = "\<esc>g"
  if col(".") == 1
    let keys ..= 'P'
  else
    let keys ..= 'p'
  endif
  if col('.') == col('$')
    let keys ..= 'a'
  else
    let keys ..= 'i'
  endif
  return keys
endfunction
inoremap <expr> <a-v> <sid>insert_put()
tnoremap <c-v> <c-\><c-n>"+pa

function! s:empty_lines(count, above)
  let current_position = getcurpos()
  let new_position = [current_position[1], current_position[4]]
  let line_to_insert = new_position[0]
  if a:above
    let line_to_insert = new_position[0] - 1
    let new_position[0] += a:count
  endif
  call append(line_to_insert, repeat([''], a:count))
  call cursor(new_position)
endfunction
nnoremap <silent> [<cr> :<c-u>call <sid>empty_lines(v:count1, v:true)<cr>
nnoremap <silent> ]<cr> :<c-u>call <sid>empty_lines(v:count1, v:false)<cr>

"" automatically replace tabs with spaces on saving
"" set g:autoretab to false to turn off this behavior
let g:autoretab = v:true
"" ...or invoke this command to toggle option
command! AutoRetabToggle let g:autoretab = !g:autoretab
augroup auto_retab
  autocmd!
  autocmd BufWrite * if g:autoretab | retab | endif
augroup end
"" automatically remove trailing spaces
"" set g:autoremove_trail_spaces to false to turn off this behavior
let g:autoremove_trail_spaces = v:true
"" ...or invoke this command to toggle option
command! AutoRemoveTrailSpaceToggle let g:autoremove_trail_spaces = !g:autoremove_trail_spaces
augroup auto_remove_trail_space
  autocmd!
  function! s:remove_trail_space()
    let view = winsaveview()  " store view to avoid cursor movement to last removed trailing space position
    try
      %s/\v\s+$//
    catch /E486:/  " no trailing spaces found, suppress error message
    endtry
    call winrestview(view)  " restore window view
  endfunction
  autocmd BufWrite * if g:autoremove_trail_spaces | call <sid>remove_trail_space() | endif
augroup end

set ignorecase
set smartcase
"" highlight matches only during searching
augroup searching_highlight
  autocmd!
  set nohlsearch
  autocmd CmdlineEnter /,\? set hlsearch
  autocmd CmdlineLeave /,\? set nohlsearch
augroup end
"" easier searching of visually selected text
vnoremap <c-s> y/<c-r>"<cr>
