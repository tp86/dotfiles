syntax on
filetype plugin indent on

set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set shiftround
set autoindent
set smartindent

set number relativenumber numberwidth=5 signcolumn=yes
set laststatus=2
set noequalalways
set splitbelow splitright

let g:netrw_liststyle = 3

set clipboard^=unnamed,unnamedplus

if has('gui_running')
  set guioptions=agic
  set guifont=Hack\ 12
endif

set wildmenu
set wildmode=longest,full
set wildoptions=pum
cnoremap <expr> <c-j> wildmenumode() ? "\<down>" : "\<c-j>"
cnoremap <expr> <c-k> wildmenumode() ? "\<up>" : "\<c-k>"
cnoremap <expr> <c-l> wildmenumode() ? "\<right>" : "\<c-l>"
cnoremap <expr> <c-h> wildmenumode() ? "\<left>" : "\<c-h>"

nnoremap [q :cprevious<cr>
nnoremap ]q :cnext<cr>

let mapleader = " "
let maplocalleader = " "

let s:vim_home = fnamemodify($MYVIMRC, ':p:h')

let s:plug_file = expand(s:vim_home..'/autoload/plug.vim')
if empty(glob(s:plug_file))
  let s:curl = 'curl'
  if has('win32')
    let s:curl ..= '.exe'
  endif
  silent execute '!' .. s:curl .. ' -fLo ' .. s:plug_file .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if empty(glob(s:vim_home .. '/tmp'))
  call mkdir(s:vim_home .. '/tmp')
endif
let &backupdir = join([s:vim_home .. '/tmp', '~/tmp'], ',')
let &directory = join([s:vim_home .. '/tmp', '~/tmp'], ',')

call plug#begin()

Plug 'tpope/vim-surround'
Plug 'tmsvg/pear-tree'
let g:pear_tree_ft_disabled = ['vim']
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1
augroup scheme_pear_tree
  autocmd!
  autocmd FileType scheme,racket,clojure let b:pear_tree_pairs = {
        \ '(': {'closer': ')'},
        \ '[': {'closer': ']'},
        \ '"': {'closer': '"'},
        \ '{': {'closer': '}'},
        \}
augroup end
Plug 'justinmk/vim-sneak'
let g:sneak#label = v:true
Plug 'tpope/vim-commentary'
" Plug 'junegunn/rainbow_parentheses.vim'
" let g:rainbow#max_level = 16
Plug 'luochen1990/rainbow'
let g:rainbow_conf = {
      \ 'guifgs': ['white', 'orange', 'red', 'green', 'yellow', 'magenta', 'cyan'],
      \ 'ctermfgs': ['white', 'blue', 'red', 'green', 'yellow', 'magenta', 'cyan'],
      \}
augroup rainbow_activation
  autocmd!
  " autocmd FileType clojure,scheme RainbowParentheses
  autocmd FileType scheme,racket,clojure RainbowToggleOn
augroup end

Plug 'morhetz/gruvbox'
" let g:gruvbox_italic=1

Plug 'axvr/zepl.vim'
let g:repl_config = {
      \ 'racket': { 'cmd': 'racket' },
      \ 'python': { 'cmd': 'ipython' },
      \ 'clojure': { 'cmd': 'clj' },
      \}
augroup zepl_mappings
  autocmd!
  autocmd User ZeplTerminalWinOpen if b:zepl_cmd =~ 'racket'
        \| tnoremap <c-\> Î»
        \| endif
augroup end

Plug 'bhurlow/vim-parinfer'
let g:vim_parinfer_filetypes = ['scheme', 'racket', 'clojure']

Plug 'benknoble/vim-racket'

Plug 'jmcantrell/vim-virtualenv'
let g:virtualenv_stl_format = '(%n)'
let g:virtualenv_directory = expand("$HOME") .. '/.venv'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
set updatetime=400
nnoremap <silent> cd <cmd>GitGutterPreviewHunk<cr>
nnoremap <silent> cu <cmd>GitGutterUndoHunk<cr>

Plug 'davidhalter/jedi-vim'
augroup python_jedi_completion
  autocmd!
  autocmd FileType python if exists("$VIRTUAL_ENV") | let b:jedi_environment_path = expand("$VIRTUAL_ENV") | endif
augroup end

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
if empty(glob(s:vim_home .. '/sessions'))
  call mkdir(s:vim_home .. '/sessions')
endif
let g:session_directory = s:vim_home .. "/sessions"
set sessionoptions-=help
set sessionoptions-=buffers
set sessionoptions+=resize
set sessionoptions+=winpos
let g:session_autosave = "yes"
let g:session_autoload = "no"
command! SessionName :echo xolox#session#find_current_session()

Plug 'tpope/vim-fireplace'

call plug#end()

set hidden

" set termguicolors
set background=dark
colorscheme gruvbox

highlight! link VertSplit StatusLine
highlight! link SignColumn LineNr
" GitGutter signs customization
let signcolumn_add = synIDattr(synIDtrans(highlightID("DiffAdd")), "fg", "gui")
let signcolumn_change = synIDattr(synIDtrans(highlightID("DiffChange")), "fg", "gui")
let signcolumn_delete = synIDattr(synIDtrans(highlightID("DiffDelete")), "fg", "gui")
execute "highlight! GitGutterAdd guifg=" .. signcolumn_add
execute "highlight! GitGutterChange guifg=" .. signcolumn_change
execute "highlight! GitGutterChangeDelete guifg=" .. signcolumn_delete
execute "highlight! GitGutterDelete guifg=" .. signcolumn_delete
" cursor line highlighting customization
set cursorlineopt=number
let normal_bg = synIDattr(synIDtrans(highlightID("Normal")), "bg", "gui")
execute "highlight! CursorLineNr guibg=" .. normal_bg

set nowrap
let &listchars = join(["tab:\u00bb ", "trail:\u00b7", "precedes:\u27ea", "extends:\u27eb"], ',')
let &fillchars ..= ",vert: "
set list
set scrolloff=3
set sidescrolloff=6
set sidescroll=1
augroup color_column
  autocmd!
  autocmd BufNewFile,BufRead,BufWinEnter,WinEnter *
        \ if &filetype != 'help' |
        \ let &l:colorcolumn = join([80, 120, 150], ',') |
        \ else |
        \ let &l:colorcolumn = '' |
        \ endif
  autocmd WinLeave * let &l:colorcolumn = ''
augroup end
augroup cursor_line
  autocmd!
  autocmd BufNewFile,BufRead,BufWinEnter,WinEnter *
        \ if &filetype != 'help' |
        \ let &l:cursorline = !&diff |
        \ else |
        \ let &l:cursorline = 0 |
        \ endif
  autocmd OptionSet diff let &l:cursorline = !v:option_new
  autocmd WinLeave * setlocal nocursorline
augroup end
" open quickfix window always at the bottom of all windows
augroup quickfix_window
  autocmd!
  autocmd FileType qf wincmd J
augroup end

tnoremap <esc> <c-\><c-n>
augroup terminal_settings
  autocmd!
  autocmd TerminalWinOpen * setlocal nonumber norelativenumber termwinscroll=100000 signcolumn=no
  autocmd TerminalWinOpen,BufEnter,WinEnter * if &buftype == 'terminal' | setlocal sidescrolloff=0 | endif
augroup end

augroup terminal_startup
  autocmd!
  function! s:terminal_startup()
    if exists("$VIRTUAL_ENV") && !empty(expand("$VIRTUAL_ENV"))
      let python_venv_path = fnamemodify(expand("$VIRTUAL_ENV"), ':p')
      " Command running in terminal buffer
      let cmd = join(split(bufname(), ':')[2:-1], ':')
      if has("unix")
        let activation_script = expand(python_venv_path .. "bin/activate")
        let activation_cmd = "\<c-e>\<c-u>source " .. activation_script
      endif
      if !empty(activation_cmd)
        call term_sendkeys('', activation_cmd .. "\<cr>")
      endif
    endif
  endfunction
  autocmd TerminalOpen * call <SID>terminal_startup()
augroup end

if !has("gui_running")
  execute "set <a-h>=\eh"
  execute "set <a-j>=\ej"
  execute "set <a-k>=\ek"
  execute "set <a-l>=\el"
endif
nnoremap <a-h> <c-w>h
nnoremap <a-j> <c-w>j
nnoremap <a-k> <c-w>k
nnoremap <a-l> <c-w>l
inoremap <a-h> <c-\><c-n><c-w>h
inoremap <a-j> <c-\><c-n><c-w>j
inoremap <a-k> <c-\><c-n><c-w>k
inoremap <a-l> <c-\><c-n><c-w>l
vnoremap <a-h> <c-w>h
vnoremap <a-j> <c-w>j
vnoremap <a-k> <c-w>k
vnoremap <a-l> <c-w>l
tnoremap <a-h> <c-w>h
tnoremap <a-j> <c-w>j
tnoremap <a-k> <c-w>k
tnoremap <a-l> <c-w>l

noremap H ^
noremap L $
nnoremap <backspace> <c-^>
inoremap <c-j> <c-n>
inoremap <c-k> <c-p>

function! s:insert_put()
  let keys = "\<esc>g"
  if col(".") == 1
    let keys ..= 'P'
  else
    let keys ..= 'p'
  endif
  if col('.') == col('$')
    let keys ..= 'a'
  else
    let keys ..= 'i'
  endif
  return keys
endfunction
inoremap <expr> <a-v> <sid>insert_put()
tnoremap <c-v> <c-\><c-n>"+pa

function! s:empty_lines(count, above)
  let current_position = getcurpos()
  let new_position = [current_position[1], current_position[4]]
  let line_to_insert = new_position[0]
  if a:above
    let line_to_insert = new_position[0] - 1
    let new_position[0] += a:count
  endif
  call append(line_to_insert, repeat([''], a:count))
  call cursor(new_position)
endfunction
nnoremap <silent> [<cr> :<c-u>call <sid>empty_lines(v:count1, v:true)<cr>
nnoremap <silent> ]<cr> :<c-u>call <sid>empty_lines(v:count1, v:false)<cr>

" automatically replace tabs with spaces on saving
" set g:autoretab to false to turn off this behavior
let g:autoretab = v:true
" ...or invoke this command to toggle option
command! AutoRetabToggle let g:autoretab = !g:autoretab
augroup auto_retab
  autocmd!
  autocmd BufWrite * if g:autoretab | retab | endif
augroup end
" automatically remove trailing spaces
" set g:autoremove_trail_spaces to false to turn off this behavior
let g:autoremove_trail_spaces = v:true
" ...or invoke this command to toggle option
command! AutoRemoveTrailSpaceToggle let g:autoremove_trail_spaces = !g:autoremove_trail_spaces
augroup auto_remove_trail_space
  autocmd!
  function! s:remove_trail_space()
    let view = winsaveview()  " store view to avoid cursor movement to last removed trailing space position
    try
      %s/\v\s+$//
    catch /E486:/  " no trailing spaces found, suppress error message
    endtry
    call winrestview(view)  " restore window view
  endfunction
  autocmd BufWrite * if g:autoremove_trail_spaces | call <sid>remove_trail_space() | endif
augroup end

set incsearch
set ignorecase
set smartcase
" highlight matches only during searching
augroup searching_highlight
  autocmd!
  set nohlsearch
  autocmd CmdlineEnter /,\? set hlsearch
  autocmd CmdlineLeave /,\? set nohlsearch
augroup end
" easier searching of visually selected text
vnoremap <c-s> y/<c-r>"<cr>

" statusline
function! s:cwd(winid)
  let ignored_filetypes = ['help']
  if index(ignored_filetypes, &filetype) < 0
    let cwd = fnamemodify(getcwd(a:winid), ':~')
    return pathshorten(cwd) .. ': '
  endif
  return ''
endfunction

function! s:relative_file_path(winid)
  let full_cwd = escape(fnamemodify(getcwd(a:winid), ':p'), '\%')
  let bufname_full = fnamemodify(bufname(winbufnr(a:winid)), ':p')
  let relative_path = matchstr(bufname_full, '\v^' .. full_cwd .. '\zs.*$')
  if strlen(relative_path) == 0
    let relative_path = bufname_full
  endif
  let relative_dir = fnamemodify(relative_path, ':h')
  if relative_dir =~ '\v^' .. expand("$HOME")
    let relative_dir = substitute(relative_dir, '\v^' .. expand("$HOME"), '~', '')
  endif
  let filename = fnamemodify(bufname_full, ':t')
  if bufname_full =~# '\v^fugitive:'
    return filename
  endif
  if empty(filename)
    return '[No Name]'
  endif
  if relative_dir == '.'
    return filename
  else
    return pathshorten(relative_dir) .. '/' .. filename
  endif
endfunction

function! s:python_venv()
  if &filetype == 'python'
    return VirtualEnvStatusline() .. ' '
  endif
  return ''
endfunction

function! s:git_branch()
  let branch = pathshorten(FugitiveHead(8))
  if !empty(branch)
    return branch .. ' '
  endif
  return ''
endfunction

function! s:git_file_type(winid)
  const git_type_to_name = {
        \ "0": "index",
        \ "1": "current",
        \ "2": "incoming",
        \}
  let bufname_full = fnamemodify(bufname(winbufnr(a:winid)), ':p')
  if bufname_full =~# '\v^fugitive:' .. escape(expand("/"), '\') .. '{2,}'
    let git_buf_type = matchstr(bufname_full, '\v' .. escape('.git' .. expand("/"), '.\') .. '{2}\zs\x+\ze')
    if !empty(git_buf_type)
      let git_type_name = get(git_type_to_name, git_buf_type, "(" .. git_buf_type[:7] .. ")")
      return '@ ' .. git_type_name
    endif
  endif
  return ''
endfunction

function! s:stl()
  let s = expand("<SID>")
  let winid = g:statusline_winid
  return ''
        \ .. '%{' .. s .. 'cwd(' .. winid .. ')}'
        \ .. '%{' .. s .. 'git_branch()}'
        \ .. '%{' .. s .. 'relative_file_path(' .. winid .. ')}'
        \ .. ' %m'
        \ .. '%{' .. s .. 'git_file_type(' .. winid .. ')}'
        \ .. '%='
        \ .. '%{' .. s .. 'python_venv()}'
        \ .. '%y'
endfunction

let &statusline = '%!' .. expand("<SID>") .. 'stl()'
